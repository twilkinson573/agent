#!/usr/bin/env ruby
require 'gli'
require 'json'
begin # XXX: Remove this begin/rescue before distributing your app
require 'agent'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/agent` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/agent now"
  exit 64
end

include GLI::App

program_desc 'Interact with the Energy Transition Model through the terminal'

version Agent::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Returns a json object of all parameters of each market defined in the ETM'
arg_name 'area code (OPTIONAL)'
command :areas do |c|
  c.action do |global_options,options,args|
    unless args.empty?
      areas = %x(curl -i http://et-engine.com/api/v3/areas/"#{ args.first }")
      areas = '{' + areas.split('{', 2).last
    else
      areas = %x(curl -i http://et-engine.com/api/v3/areas/)
      areas = "[" + areas.split('[').last
    end

    puts JSON.pretty_generate(JSON.parse(areas))
  end
end

desc 'Display a specific ETM scenario by providing its ID'
arg_name 'scenario ID number'
command :show do |c|

  c.switch [:d, :detailed]

  c.action do |global_options,options,args|
    exit_now!('id is required') if args.empty?
    if options[:d]
      scenario = %x(curl -i http://et-engine.com/api/v3/scenarios/"#{ args.first }"?detailed=true)
    else
      scenario = %x(curl -i http://et-engine.com/api/v3/scenarios/"#{ args.first }")
    end
    scenario = '{' + scenario.split('{', 2).last
    puts JSON.pretty_generate(JSON.parse(scenario))
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
