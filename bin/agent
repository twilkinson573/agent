#!/usr/bin/env ruby
require 'gli'
require 'json'
require 'agent'

include GLI::App

program_desc 'Interact with the Energy Transition Model through the terminal'

version Agent::VERSION

subcommand_option_handling :normal
arguments :strict

# TODO Set global config author variable
# TODO Set glabal 'my scenarios' array/yml file etc


desc 'Lists all parameters of each market defined in the ETM'
arg_name 'area_code(OPTIONAL)'
command :areas do |c|
  c.action do |global_options,options,args|
    unless args.empty?
      areas = %x(curl http://et-engine.com/api/v3/areas/"#{ args.first }")
    else
      areas = %x(curl http://et-engine.com/api/v3/areas/)
    end

    puts JSON.pretty_generate(JSON.parse(areas))
  end
end

desc 'Display a specific ETM scenario by providing its ID'
arg_name 'scenario ID number'
command :show do |c|

  c.desc 'Display complete scenario info including user modified slider settings'
  c.switch [:d, :detailed]

  c.action do |global_options,options,args|
    exit_now!('id is required') if args.empty?
    if options[:d]
      scenario = %x(curl http://et-engine.com/api/v3/scenarios/"#{ args.first }"?detailed=true)
    else
      scenario = %x(curl http://et-engine.com/api/v3/scenarios/"#{ args.first }")
    end
    puts JSON.pretty_generate(JSON.parse(scenario))
  end
end

desc 'Creates a new ETM scenario'
command :create do |c|
  c.action do |global_options,options,args|

    puts 'New scenario'
    puts 'Enter title:'
    title = STDIN.gets.chomp

    puts 'Starting Template: (leave blank to start from base scenario)'
    template = STDIN.gets.chomp
    if template.length == 0
      puts 'Enter area code (default NL):'
      area_code = STDIN.gets.chomp.downcase
      %w(uk eu de pl fr es).include?(area_code) ? area_code : area_code = 'nl'

      puts 'Enter end year (default 2030):'
      end_year = STDIN.gets.chomp
      end_year.to_i.between?(1900,3000) ? end_year : end_year = '2030'

      %x(curl -i -X POST -H "Content-Type: application/json" -d '{"scenario": 
         {"title": "#{ title }", "area_code": "#{ area_code }", 
         "end_year": "#{ end_year }", "source": "agent"}}' http://et-engine.com/api/v3/scenarios)
    else

      template_data = JSON.parse(%x(curl http://et-engine.com/api/v3/scenarios/"#{ template }"))

      %x(curl -i -X POST -H "Content-Type: application/json" -d '{"scenario": 
         {"title": "#{ title } -- Template: #{ template_data['title'] }", "area_code": "#{ template_data['area_code'] }",
         "end_year": "#{ template_data['end_year'] }", "template": "#{ template }",
         "source": "agent"}}' http://et-engine.com/api/v3/scenarios)
    end

    # return scenario and URL
  end
end

desc 'Update metadata or add input parameters to one of your scenarios'
command :update do |c|
  # Get scenario by id
  # Use STDIN to update metadata/add inputs until 'finish'
  # update scenario with hash of all new params
end

desc 'Lists each available input users can alter to shape scenarios'
arg_name 'input_name(OPTIONAL)'
command :inputs do |c|
  c.action do |global_options,options,args|
    unless args.empty?
      inputs = %x(curl http://et-engine.com/api/v3/inputs/"#{ args.first }")
    else
      inputs = %x(curl http://et-engine.com/api/v3/inputs/)
    end
    puts JSON.pretty_generate(JSON.parse(inputs))
  end
end

desc 'Lists each available template users can use as a starting point for their scenarios'
command :templates do |c|
  c.action do |global_options,options,args|
    templates = %x(curl http://et-engine.com/api/v3/scenarios/templates)

    puts JSON.pretty_generate(JSON.parse(templates))
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
